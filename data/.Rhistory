demo()
q()
ui <- dashboardPage(
dashboardHeader(title = "Shiny Template"),
dashboardSidebar(
sideBarFilterUI("sidebar")
),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "custom.css")
),
fluidRow(
leaflet_mapUI('map')
),
fluidRow(
valueBoxesUI('valuebox_row1')
),
fluidRow(
dataTableUI('table')
)
)
)
shiny::runApp('GitHub/workforce_solutions')
install.packages('readxl')
runApp('GitHub/workforce_solutions')
install.packages('RPostgreSQL')
runApp('GitHub/workforce_solutions')
install.packages('janitor')
runApp('GitHub/workforce_solutions')
runApp('GitHub/workforce_solutions')
runApp('GitHub/workforce_solutions')
runApp('GitHub/workforce_solutions')
swirl
library(swirl)
swirl()
swirl()
x->c(44,NA, 5, NA)
x<- c(44,NA,5,NA)
x*3
y<- rnorm(1000)
z<- rep(NA,1000)
my_data<-sample(c(y,z), 100)
my_na<- is.na(my_data)
my_na
my_data== NA
sum(my_na)
my_data
0/0
Inf-Inf
help
swirl(help)
swirl()
install.packages(c("httr", "jsonlite", "lubridate"))
library('httr')
library(httr)
library(httr)
library(jsonlite)
library(lubridate)
options(stringsAsFactors = FALSE)
read.table(test.xlsx)
read.table("test.xlsx")
read.table("test.xlsx", header=FALSE)
url<- "http://www.name-prism.com"
library(swirl)
ls()
swirl()
c(0.5, 55, -10, 6)
num_vect<- c(0.5, 55, -10, 6)
tf<- num_vect <1
tf
num_vect>=6
my_char<- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name<- c(my_char, "Lara")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X," "Y", "Z"), sep="")
paste(1:3, c("X," "Y", "Z"), sep="")
paste(1:3, c("X," "Y", "Z"), sep="")
1:3
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x
x[1:10]
x[is.na(x)]
y<- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[30000=]
x[30000]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<- c(11,2,NA)
names(vect2)<- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
swirl()
swirl()
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<- matrix(1:20, nrow=4, ncol=5)
identical(matrix, matrix2)
identical(c(matrix, matrix2))
?identical
identical(my_matrix, my_matrix2)
patients<- c("Bill", "Gina", "Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients, my_matrix)
my_dta
my_data
class(my_data)
cnames<-c("patient","age", "weight", "bp", "rating", "test")
colnames(my_data)<- cnames
my_data
swirl()
swirl(
)
swirl()
library(swirl
)
swirl()
TRUE -== TRUE
TRUE == TRUE
(FALSE ==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
5!==7
!5==7
FALSE & FALSE
TRUE & C(TRUE,FALSE,FALSE)
TRUE & C(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
swirl()
swirl()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
library(swirl)
swirl()
boring_function()
boring_function()
boring_function
sumbit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num =5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(std, c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
0
library(swirl)
swirl()
submit()
telegram("Hey there", "you")
submit()
mad_libs(place=here, adjective=silly, noun=cat)
mad_libs(place="here", adjective="silly", noun="cat")
library(swirl)
swirl()
submit()
sumbit()
submit()
submit()
swirl()
library(swirl)
swirl()
Sys.date()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11.5)
remainder(11,5)
remainder(divisor =
| 11, num = 5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(sd(),c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("no")
submit()
mad_libs("here", "it", "is")
play()
mad_libs(place="here", "it", "is")
nxt()
submit()
"I love"%%"R"
"I love"%P%"R"
"I love"%p%"R"
"I"%p% "love"%p%"R"
"I"%p% "love"%p%"R!"
library(swirl)
swirl()
View(mad_libs)
View(mad_libs)
submit()
"I" %p% "love" %p% "R!"
library(swirl)
swirl()
head(flags)
dim(flags)
class*=(flags)
class=(flags)
class(flags)
cls_list<- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<- sapply(flags, class)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flags_colors<- flags[,11:17]
flag_colors<- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_color, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<- flags[,19:23]
lapply(flag_shapes, range)
shape_mat<- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
play()
str(flags)
summary(flags)
nxt()
sapply(flags, unique)
setwd("/Users/Lara/Documents/Repository/TCJC/"
library(readxl)
snapnames<-read.csv('data/DATA - Jenkins Monthly Disposition Reports.txt')
leaflet_mapUI <- function(id){
ns <- NS(id)
leafletOutput(ns('baseMap'))
#plotOutput('')
#plotOutput('')
}
dataTableOutput <- function(id) {
ns <- NS(id)
dataTableOutput(ns('table1'))
}
sideBarFilterUI <- function(id) {
ns <- NS(id)
div(
selectizeInput(inputId = ns("polygons"),
label = "Choose a Boundary Layer:",
choices = poly_layer_options,
multiple = FALSE),
### ^^^^ how to deal with multiple choices not allowed-------------
# options = list(
#   placeholder = 'Select one',
#   onInitialize = I('function() { this.setValue(""); }')
# ))
selectizeInput(inputId = ns("points"),
label = "Display Points:",
choices = pt_layer_options,
multiple = TRUE)
# selectizeInput(inputId = ns("districts"),
#                label = "Filter by School District",
#                choices = district_options,
#                multiple = TRUE),
#
# selectizeInput(inputId = ns("campus_type"),
#                label = "Filter by School Type",
#                choices = campus_type_options,
#                multiple = TRUE),
#
# selectizeInput(inputId = ns("campus"),
#                label = "Filter by School Campus",
#                choices = campus_options,
#                multiple = TRUE),
#
# selectizeInput(inputId = ns("magnet"),
#                label = "Filter by Magnet School Status",
#                choices = magnet_options,
#                multiple = FALSE),
# selectizeInput(inputId = ns("zip"),
#                label = "Filter by Zip Code",
#                choices = zip_options,
#                multiple = TRUE)
# dateRangeInput(ns("dateRange"),
#              label = 'Filter by Date',
#              start = Sys.Date() - 2, end = Sys.Date() + 2
)
}
valueBoxesUI <- function(id) {
ns <- NS(id)
div(
valueBoxOutput(ns("valueBox1")),
valueBoxOutput(ns("valueBox2")),
valueBoxOutput(ns("valueBox3"))
)
}
dataTableUI <- function(id){
ns <- NS(id)
DT::dataTableOutput(ns("table1"))
}
dateRangeUI <- function(id) {
ns <- NS(id)
uiOutput(ns("date_range"))
}
modalUI <- function(id){
ns <- NS(id)
bsModal(ns("modal"))
}
modal <- function(input, output, session) {
toggleModal(session, "startupModal", toggle = "open")
}
#select filter for schools
sideBarFilter <- function(input, output, session){
filtered_df <- reactive({
df <- campus_data
if(!is.null(input$district)){
df <- filter(df, DISTN %in% input$district)
}
if(!is.null(input$campus_type)){
df <- filter(df, SchlT %in% input$campus_type)
}
if(!is.null(input$campus)){
df <- filter(df, CAMPN %in% input$campus)
}
#### what's the syntax for a filter that does NOT allow multiple options? (ie: Magnet)
return(df)
})
return(filtered_df)
}
shiny::runApp('GitHub/workforce')
runApp('GitHub/workforce')
runApp('GitHub/workforce')
runApp('GitHub/workforce')
shiny::runApp('GitHub/workforce')
setwd("/Users/Lara/Documents/Repository/harriscriminalcourt/data")
library(readr)
library(dplyr)
# prep the raw file
# detect fixed width lengths - include spaces!
s <- paste
cols <- strsplit(s, " ") %>% unlist() %>% nchar()
cols <- list(cols)
cols <- cols[[1]] +1 # add 1 to the length to account for the spaces
cols2 <- fwf_widths(cols) # convert lengths into something `read_fwf` can understand
raw <- read_fwf("DATA - Jenkins Monthly Disposition Reports.txt", cols2)
colnames(raw) <- raw[1, ] # create column names from the first row of the data frame
raw <- raw[-1, ] # drop the column name row
raw <- raw[-1, ] # drop the dash row
head(raw)
raw$fda <- as.Date(raw$fda, format = "%Y%m%d")
raw$nda <- as.Date(raw$nda, format = "%Y%m%d")
raw$def_dob <- as.Date(raw$def_dob, format = "%Y%m%d")
View(raw)
write.csv(raw, file = "/Users/Lara/Documents/Repository/harriscriminalcourt/data/parsed.csv", row.names= FALSE)
setwd("/Users/Lara/Documents/Repository/harriscriminalcourt/data")
library(readr)
library(dplyr)
# prep the raw file
# detect fixed width lengths - include spaces!
s <- paste
cols <- strsplit(s, " ") %>% unlist() %>% nchar()
cols <- list(cols)
cols <- cols[[1]] +1 # add 1 to the length to account for the spaces
cols2 <- fwf_widths(cols) # convert lengths into something `read_fwf` can understand
raw <- read_fwf("DATA - Jenkins Monthly Disposition Reports.txt", cols2)
colnames(raw) <- raw[1, ] # create column names from the first row of the data frame
raw <- raw[-1, ] # drop the column name row
raw <- raw[-1, ] # drop the dash row
head(raw)
raw$fda <- as.Date(raw$fda, format = "%Y%m%d")
raw$nda <- as.Date(raw$nda, format = "%Y%m%d")
raw$def_dob <- as.Date(raw$def_dob, format = "%Y%m%d")
raw$dispdt <- as.Date(raw$dispdt, format = "%Y%m%d")
write.csv(raw, file = "/Users/Lara/Documents/Repository/harriscriminalcourt/data/parsed.csv", row.names= FALSE)
shiny::runApp('~/GitHub/workforce')
}
runApp('~/GitHub/workforce')
